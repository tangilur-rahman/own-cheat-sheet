/*
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è MySQL ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è



Chapter 1 : Introduction   ‚úåÔ∏è

  ‚≠ï What is Database ?

   üëâ A database is a collection of data stored in a format that can easily be accessed.

   üëâ MySQL is a database management system (DBMS).

   üëâ MySQL is a relational database management system (RDBMS).

   üëâ RDBMS use Structured Query Language(SQL)


  ‚≠ï Advantage of MySQL

   1Ô∏è‚É£ Cross Platform.
   
   2Ô∏è‚É£ Used with multiple languages.

   3Ô∏è‚É£ MySQL software is Open Source.

   4Ô∏è‚É£ MySQL is RDBMS.

   5Ô∏è‚É£ MySQL database server is fast, reliable, scalable and easy to use.

   6Ô∏è‚É£ MySQL server works in client/server or embedded systems.


   ‚ôªÔ∏è Client => RDBMS => Database.



Chapter 2 : Installing MySQL  ‚úåÔ∏è

  ‚≠ï MySQL Community Server / XAMPP / Tomcat

  ‚≠ï MySQL Workbench / DataGrip

  

Chapter 3 : Create Database   ‚úåÔ∏è

  #Ô∏è‚É£ Create Database 

    Syntax :  üåø

      ‚úíÔ∏è CREATE DATABASE database_name;

  #Ô∏è‚É£ Use Specific_Database 

    Syntax :  üåø

      ‚úíÔ∏è use specific_database_name;



Chapter 4 : Datatype   ‚úåÔ∏è

  #Ô∏è‚É£ Datatype

    ‚≠ï 3 types of category in Datatype:

      1Ô∏è‚É£ String

        üëâ CHAR(size) => 0 - 255 CH

        üëâ VARCHAR(size) => 0 - 65535 CH

        üëâ BINARY(size) => 0 - 255 

        üëâ VARBINARY(size) => 0 - 65535

        üëâ TINYTEXT => 255 CH

        üëâ TEXT(size) => 65,535 bytes

        üëâ MEDIUMTEXT(size) => 16,777,215 CH

        üëâ LONGTEXT(size) => 4,294,967,295 CH

        üëâ TINYBLOB => 255 bytes

        üëâ BLOB => 65,535 bytes

        üëâ MEDIUMBLOB => 16,777,215 bytes

        üëâ LOGNBLOB => 4,294,967,295 bytes

        üëâ ENUM(var1, var2, var3, ...) => list up to 65535 values

        üëâ SET(var1, var2, var3, ...) => list up to 64 values


      2Ô∏è‚É£ Numeric

        üëâ BIT(size) => 1 to 64

        üëâ TINYINT(size) => -128 to 127

        üëâ INT(size) => -2147483648 to 2147483648

        üëâ INTEGER(size) => -2147483648 to 2147483648

        üëâ SMALLINT(size) => -32768 TO 32767

        üëâ MEDIUMINT(size) => -8388608 TO 8388607

        üëâ BIGINT(size) => -9223372036854775808 TO 9223372036854775807

        üëâ BOOL => 0 / 1

        üëâ BOOLEAN => 0 / 1

        üëâ FLOAT(p) => both side same 

        üëâ DOUBLE(size, d) => total, after point 

        üëâ DECIMAL(size, d) => size = 60, d = 30

        üëâ DEC(size, d) => size = 60, d = 30

        
      3Ô∏è‚É£ Data and Time

        üëâ DATE(yyyy-mm-dd) => '1000-01-01' to '9999-12-31'

        üëâ DATETIME(yyyy-mm-dd hh:mm:ss)

        üëâ TIMESTAMP(yyyy-mm-dd hh:mm:ss) 

        üëâ TIME(hh:mm:ss) 

        üëâ YEAR(yyyy) 



Chapter 5 : Table   ‚úåÔ∏è

  #Ô∏è‚É£ Create Table 
  
    Syntax :  üåø

    ‚úíÔ∏èCREATE TABLE table_name(
        column1 datatype,
        column2 datatype,
        column3 datatype,
        ...
      );


  #Ô∏è‚É£ Show Table

    Syntax :  üåø

    ‚úíÔ∏è show tables;

  
  #Ô∏è‚É£ Insert Data Into Table 

    Syntax :  üåø

    ‚úíÔ∏èINSERT INTO table_name(col1,  col2, ...)
      VALUES(value1, value2, value3, ...);


    üëâ values must be same order as columns.

    üëâ If we want to insert all columns values then we can ignore to define columns.


  ‚≠ï Insert Multiple Rows 

    Syntax :  üåø

    ‚úíÔ∏èINSERT INTO table_name(col1, col2, col3)
      VALUES
      (val1, val2, val3,...),
      (val1, val2, val3,...),
      (val1, val2, val3,...);
    



Chapter 6 : Constraints   ‚úåÔ∏è
  
  #Ô∏è‚É£ List of Constraints 

    1Ô∏è‚É£ NOT NULL
    
    2Ô∏è‚É£ UNIQUE

    3Ô∏è‚É£ DEFAULT

    4Ô∏è‚É£ CHECK

    5Ô∏è‚É£ PRIMARY KEY

    6Ô∏è‚É£ FOREIGN KEY


  üëâ All constraints, we can declare when TABLE will be create.


  Syntax :  üåø

  ‚úíÔ∏èCREATE TABLE table_name (
      col_name datatype constraint constraint ...
    );

  
  Example :  üìù

  CREATE TABLE teacher_info(
    id int NOT NULL UNIQUE,
    name varchar(20) NOT NULL ,
    gender varchar(10) NOT NULL,
    age int NOT NULL CHECK ( age >=40 ),
    phone varchar(11) UNIQUE,
    city varchar(20) DEFAULT 'Dhaka'
  );


  ‚ö†Ô∏è PRIMARY KEY & FOREIGN KEY will learn later.




Chapter 7 : SELECT   ‚úåÔ∏è

  üëâ SELECT command used for displaying our TABLE's data.

  Syntax :  üåø

    ‚≠ï Displaying Specific Columns 

    ‚úíÔ∏è SELECT col1, col2, col3, ... FROM table_name;


    ‚≠ï Displaying All Columns

    ‚úíÔ∏è SELECT * FROM table_name;


    ‚≠ï Displaying With Alias_Name

    ‚úíÔ∏è SELECT col1 AS anything, col2 AS 'any words', col3, ... FROM table_name;
  


  #Ô∏è‚É£ Displaying TABLE's Data Through Condition (WHERE)

    ‚≠ï WHERE Comparison Operators

      üëâ =   =>   Equal

      üëâ >   =>   Greater Than

      üëâ >   =>   Less Than

      üëâ >=  =>   Greater Than or Equal

      üëâ <=  =>   Less Than or Equal

      üëâ !=  =>   Not Equal

      üëâ BETWEEN .. AND ..  =>  Between A Certain Range

      üëâ LIKE  =>  Search For A Pattern

      üëâ IN  =>  To Specify Multiple Possible Values For A Column
      

    Syntax :  üåø

    ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
      WHERE condition;


    Example :  üìù

    SELECT *
    FROM student_info
    WHERE gender = 'male';


  ‚ö†Ô∏è BETWEEN .. AND .., LIKE, IN will learn later.




Chapter 8 : AND, OR, NOT   ‚úåÔ∏è

  ‚≠ê Those operator are used with SELECT, INSERT, UPDATE & DELETE clause.


  Syntax :  üåø

  ‚úíÔ∏èSELECT * FROM table_name
    WHERE condition1 OPERATOR condition2 OPERATOR condition3 ...; 
  
  
  Example :  üìù

  SELECT *
  FROM teacher_info
  WHERE NOT ((age > 40 OR gender = 'male') AND city = 'Dhaka');

  
  ‚≠ê Even NOT operator also used with :

    üëâ NOT NULL

    üëâ NOT BETWEEN .. AND ..

    üëâ NOT LIKE

    üëâ NOT IN

    üëâ NOT EXISTS



Chapter 9 : IN   ‚úåÔ∏è

  Syntax :  üåø
  
    ‚≠ï IN operator
  
    ‚úíÔ∏èSELECT col1, col2, ... FROM table_name    
      WHERE column_name IN (value1, value2, ...);


    ‚≠ï NOT IN operator

    ‚úíÔ∏èSELECT col1, col2, ... FROM table_name  
      WHERE column_name NOT IN (value1, value2, ...);


  Example :  üìù

  SELECT * FROM student_info
  WHERE name NOT IN ('tangil',...);




Chapter 10 : BETWEEN .. AND ..   ‚úåÔ∏è 

  üëâ When want to define range condition then we can used BETWEEN .. AND .. operator.

 
  Syntax :  üåø

    ‚≠ï BETWEEN .. AND .. 
  
    ‚úíÔ∏èSELECT * FROM table_name
      WHERE column_name BETWEEN value1 AND value2;

    ‚≠ï NOT BETWEEN .. AND .. 

    ‚úíÔ∏èSELECT * FROM table_name
      WHERE column_name NOT BETWEEN value1 AND value2;

    
  Example :  üìù

  SELECT * FROM practice
  WHERE age NOT BETWEEN 18 and 21;


  SELECT * FROM practice
  WHERE name NOT BETWEEN 'b' and 'm';

  üëâ Find-out those name which are start with between b to m character.
  



Chapter 11 : LIKE   ‚úåÔ∏è

  üëâ LIKE operator mainly used for searching data.


  #Ô∏è‚É£ WildCard Characters :

    ‚≠ï %  => Represents anything

    ‚≠ï _  => Represents skip single character.


  Example :  üìù

    üëâ LIKE 'a%'  => Start with 'a' after that anything

    üëâ LIKE '%a'  => End with 'a' after that anything

    üëâ LIKE '%am%'  => Have 'am' in any position

    üëâ LIKE 'a%m'  => Start with 'a' and End with 'm'

    üëâ LIKE '_a%'  => 'a' in the second position

    üëâ LIKE '__a%'  => 'a' in the third position

    üëâ LIKE '_am'  => 'a' in the second position and 'm' in the third position


  Syntax :  üåø

  ‚≠ï LIKE operator
  
  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    WHERE column_name LIKE pattern;


  ‚≠ï NOT LIKE operator

  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    WHERE column_name NOT LIKE pattern;


  ‚≠ï LIKE operator with case-sensitive

  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    WHERE BINARY column_name LIKE pattern;

  üëâ Same procedure apply with NOT LIKE operator.
  
 
  Example :  üìù

  SELECT * FROM practice
  WHERE name NOT LIKE '__m%' OR name LIKE 'a%';

  SELECT * FROM practice
  WHERE phone  LIKE '017%' AND phone LIKE '%85';




Chapter 12 : SELECT With Regular Expression   ‚úåÔ∏è

  #Ô∏è‚É£ Regular Expression Patterns

    üëâ 'word'  =>  'word'  =>  Anywhere In Any String

    üëâ ^  =>  '^ra'  =>  Beginning of String

    üëâ $  =>  'man$'  =>  End of String

    üëâ [...]  =>  '[rms]'  =>  Any character listed between the square brackets (separately)

    üëâ ^[...]  =>  '^[rms]'  =>  Begins with any character listed between the square brackets

    üëâ [a-z]  => '[a-h]e'  =>  Match with in the range which 'e' in the 2nd position

    üëâ v1|v2|v3|...  =>  tangil|tom|jerry  =>  Matches any of the patterns.(| like OR operator)
    

  Syntax :  üåø

  ‚≠ï REGEXP
  
  SELECT col1, col2, ... FROM table_name
  WHERE column_name REGEXP pattern;


  ‚≠ï NOT REGEXP

  SELECT col1, col2, ... FROM table_name
  WHERE column_name NOT REGEXP pattern;

  
  Example :  üìù

  SELECT * FROM practice
  WHERE name REGEXP 'ta';
  
  SELECT * FROM practice 
  WHERE name REGEXP '^ta';

  SELECT * FROM practice
  WHERE name REGEXP 'ta$';

  SELECT * FROM practice
  WHERE name REGEXP 'tangil|sago';

  SELECT * FROM practice
  WHERE name REGEXP '^tangil|sago%';

  SELECT * FROM practice
  WHERE name REGEXP '[tsa]';

  SELECT * FROM practice
  WHERE name REGEXP '[ts]a';

  SELECT * FROM practice
  WHERE name REGEXP 'a[ts]a';

  SELECT * FROM practice
  WHERE name REGEXP '^[ts]';

  SELECT * FROM practice
  WHERE name REGEXP '[ts]$';

  SELECT * FROM practice
  WHERE name REGEXP '[a-m]';

  SELECT * FROM practice
  WHERE name REGEXP 't[a-m]';

  SELECT * FROM practice
  WHERE name REGEXP '[a-m]t';


  üëâ All procedure also apply with NOT REGEXP.

 


Chapter 13 : ORDER BY & DISTINCT   ‚úåÔ∏è

  #Ô∏è‚É£ ORDER BY

    üëâ ORDER BY clause mainly used for sorting.

  
  Syntax :  üåø

  ‚≠ï Without Condition
  
  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    ORDER BY col1, col2, ... ASC | DESC;


  ‚≠ï With Condition

  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
  WHERE condition
    ORDER BY col1, col2, ... ASC | DESC;


  üéà ASC   =>  Ascending

  üéà DESC  =>  Descending

  ‚≠ê ASC is Default


  Example :  üìù

  SELECT * FROM practice
  ORDER BY name,age;

  SELECT * FROM practice
  ORDER BY name,age DESC;


  #Ô∏è‚É£ DISTINCT

    üëâ DISTINCT clause mainly used for removing duplicates.

  Syntax :  üåø

  SELECT DISTINCT col1, col2, ... FROM table_name;


  Example :  üìù

  SELECT DISTINCT city FROM practice;




Chapter 14 : IS NULL & IS NOT NULL   ‚úåÔ∏è

  üëâ IS NULL  =>  for finding empty fields 

  üëâ IS NOT NULL  =>  for finding fill-up fields


  Syntax :  üåø

  ‚≠ï IS NULL
  
  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    WHERE column IS NULL;


  ‚≠ï IS NOT NULL

  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
    WHERE column IS NOT NULL;


  Example :  üìù

  SELECT * FROM practice
  WHERE city IS NULL;

  SELECT * FROM practice
  WHERE name IS NOT NULL;




Chapter 15 : LIMIT & OFFSET   ‚úåÔ∏è

  #Ô∏è‚É£ LIMIT

    üëâ LIMIT clause used for displaying limited data.

  
  Syntax :  üåø

  SELECT col1, col2, ... FROM table_name
  WHERE column condition
  LIMIT number;

  
  üëâ Here WHERE clause is OPTIONAL


  Example :  üìù

  SELECT * FROM practice
  WHERE city = 'DHAKA'
  LIMIT 3;


  #Ô∏è‚É£ OFFSET

    üëâ OFFSET define starting position.


  Syntax :  üåø

  SELECT col1, col2, ... FROM table_name
  WHERE column condition
  LIMIT offset_number, limit_number;


  üëâ Here WHERE clause is OPTIONAL


  Example :  üìù

  SELECT * FROM practice
  WHERE city = 'DHAKA'
  LIMIT 2,5;




Chapter 16 : Aggregate Function   ‚úåÔ∏è

  #Ô∏è‚É£ List of Aggregate Function

    üëâ  COUNT(column_name)  =>  for getting total fields 

    üëâ MAX(column_name)  =>  for getting maximum value

    üëâ MIN(column_name)  =>  for getting minimum value

    üëâ SUM(column_name)  =>  for getting total sum value

    üëâ AVG(column_name)  =>  for getting average value



  Syntax :  üåø

  SELECT Aggregate_function(column_name), col1, col2, ... FROM table_name
  WHERE condition;


  üëâ Here WHERE clause is OPTIONAL


  Example :  üìù

  SELECT COUNT(name) FROM practice;

  SELECT COUNT(name) AS Name FROM practice;

  SELECT COUNT(DISTINCT City) AS Name FROM practice;

  SELECT MAX(score) AS Maximum FROM practice;

  SELECT MAX(score) AS Minimum FROM practice;

  SELECT AVG(score) AS Average FROM practice;

  SELECT SUM(score) AS Total FROM practice;




Chapter 17 : UPDATE   ‚úåÔ∏è

  üëâ UPDATE clause used for updating columns values


  Syntax :  üåø

  UPDATE table_name
  SET column1_name = value1, column2_name = value1, ...
  WHERE condition;


  ‚≠ê If we don't define condition then it will be applied all columns in that table


  Example :  üìù

  UPDATE practice
  SET name = 'Runa', age = 22, city='Narsingdi' gender = 'female'
  where id = 1;




Chapter 18 : DELETE   ‚úåÔ∏è

  üëâ DELETE clause used for deleting existed fields.


  Syntax :  üåø

  DELETE FROM table_name
  WHERE condition;


  ‚≠ê If we don't define condition then it will be delete all fields


  Example :  üìù

  DELETE FROM practice
  WHERE id IN (4,6);




Chapter 19 : PRIMARY KEY &  FOREIGN KEY   ‚úåÔ∏è

  #Ô∏è‚É£ PRIMARY KEY

    üëâ PRIMARY KEY always has unique data.

    üëâ A PRIMARY KEY can't have null value.

    üëâ A table can contain only one PRIMARY KEY constraint.

    

  Syntax :  üåø

  ‚≠ï Create Table With PRIMARY KEY

  ‚úíÔ∏èCREATE TABLE table_name(
    col_name datatype constraint,
    col_name datatype constraint,
    ... ,
    PRIMARY KEY(column_name)
  );


  ‚≠ï Add PRIMARY KEY With Existing Table

  ‚úíÔ∏èALTER TABLE table_name
    ADD PRIMARY KEY(column_name);



  #Ô∏è‚É£ FOREIGN KEY

    üëâ A FOREIGN KEY is a key used to link multiple tables together.

    üëâ A FOREIGN KEY in one table used to point PRIMARY KEY in another table.


  Syntax :  üåø

  ‚≠ï Create Table With FOREIGN KEY

  ‚úíÔ∏èCREATE TABLE table_name(
      col_name datatype constraint,
      col_name datatype constraint,
      ... ,
      PRIMARY KEY(column_name),
      FOREIGN KEY(which_column_name) REFERENCES Other_Table_Name(column_name)
    );


  ‚≠ï Add FOREIGN KEY With Existing Table

  ‚úíÔ∏èALTER TABLE table_name
    ADD FOREIGN KEY(which_column_name) REFERENCES Other_Table_Name(column_name);


  Example :  üìù

  CREATE TABLE practice(
    id int NOT NULL AUTO_INCREMENT,
    name varchar(30) NOT NULL ,
    percentage int NOT NULL ,
    age int NOT NULL CHECK( age >=18 ),
    gender enum('male','female') NOT NULL ,
    city int NOT NULL ,
    PRIMARY KEY (id),
    FOREIGN KEY (city) REFERENCES city_info(c_id)
  );




Chapter 20 : INNER JOIN   ‚úåÔ∏è

  #Ô∏è‚É£ List Of JOINS In MySQL

    1Ô∏è‚É£ INNER JOIN

    2Ô∏è‚É£ LEFT JOIN

    3Ô∏è‚É£ RIGHT JOIN

    4Ô∏è‚É£ CROSS JOIN



  #Ô∏è‚É£ INNER JOIN

    üëâ The INNER JOIN return those records which have matching values in both tables.(Only matching records)


  Syntax :  üåø 

  SELECT col1, col2, ...
  FROM table1 t1_sub_name INNER JOIN table2 t2_sub_name

  ON t1_sub_name.FK_column_name = t2_sub_name.PK_column_name

  WHERE condition
  ORDER BY column_name;


  ‚≠ê sub_name is OPTIONAL, It's make our code more readable & short.

  ‚≠ê table1.column_name  =>  FOREIGN KEY

  ‚≠ê table2.column_name  =>  PRIMARY KEY

  üëâ Here WHERE & ORDER BY clauses are OPTIONAL.


  Example :  üìù

  SELECT p.id,p.name,percentage,gender,c.name AS City
  FROM practice p INNER JOIN city_info c
  ON p.city = c.c_id;




Chapter 21 : LEFT JOIN & RIGHT JOIN   ‚úåÔ∏è

  #Ô∏è‚É£ LEFT JOIN
   
     üëâ The LEFT JOIN returns all records from the left table and the matched records from the right table.


  Syntax :  üåø

  SELECT col1, col2, ...
  FROM table1 t1_sub_name LEFT JOIN table2 t2_sub_name
 
  ON t1_sub_name.FK_column_name = t2_sub_name.PK_column_name

  WHERE condition
  ORDER BY column_name;


  Example :  üìù

  SELECT p.id,p.name,percentage,gender,c.name AS City
  FROM practice p  LEFT JOIN city_info c
  ON p.city = c.c_id;



  #Ô∏è‚É£ RIGHT JOIN
   
    üëâ The RIGHT JOIN returns all records from the right table and the matched records from the left table.


  Syntax :  üåø

  SELECT col1, col2, ...
  FROM table1 t1_sub_name RIGHT JOIN table2 t2_sub_name
 
  ON t1_sub_name.FK_column_name = t2_sub_name.PK_column_name

  WHERE condition
  ORDER BY column_name;




Chapter 22 : CROSS JOIN   ‚úåÔ∏è

  #Ô∏è‚É£ CROSS JOIN 

    üëâ One table fully combination with another table. 


  ‚≠ê CROSS JOIN isn't related with PRIMARY KEY & FOREIGN KEY.


  Syntax :  üåø

  SELECT col1, col2, ... 
  FROM table1 CROSS JOIN table1;


  Example :  üìù

  SELECT * FROM practice CROSS JOIN city_info;




Chapter 23 : JOIN Multiple Tables  ‚úåÔ∏è

  Syntax :  üåø

  ‚≠ï INNER JOIN For Multiple Tables

  ‚úíÔ∏èSELECT col1, col2, ... 
  FROM table1 
  
  INNER JOIN table2
  ON table1.FK_column_name = table2.PK_column_name

  INNER JOIN table3
  ON table1.FK_column_name = table3.PK_column_name;


  üëâ Same procedure apply with LEFT JOIN & RIGHT JOIN.

  üëâ Or we can also combine all JOIN.

  üëâ We can also apply WHERE, ORDER BY etc clauses.


  Example :  üìù

  SELECT s.id, s.name, c.course_name AS Course, ci.city_name AS City
  FROM student_info s

  Right JOIN
    Course c
  ON s.course = c.course_id

  Right JOIN
    City ci
  ON s.city = ci.city_id;




Chapter 24 : GROUP BY & HAVING Clause  ‚úåÔ∏è
 
  #Ô∏è‚É£ GROUP BY 

    üëâ GROUP BY clause is used to grouping specific common column values and also displaying other columns's only 1st match value if we are define that after SELECT clause.

    üëâ We can used Aggregate Function for calculating grouping columns.


  Syntax :  üåø

  ‚≠ï When Single Table
  
  ‚úíÔ∏èSELECT col1, col2, ... FROM table_name
  WHERE condition
  GROUP BY column_name, ... 
  ORDER BY column_name ASC | DESC;


  ‚≠ï When Multiple Table

  ‚úíÔ∏èSELECT col1, col2, ...
  FROM table1 INNER JOIN table2
  ON table1.FK_column_name = table2.PK_column_name
  WHERE condition
  GROUP BY column_name, ... 
  ORDER BY column_name ASC | DESC;


  üëâ Those WHERE & ORDER BY clauses are OPTIONAL, but if used then order must be that sequence.


  Example :  üìù

  SELECT count(age) AS Total,age FROM Student_info
  WHERE age > 18
  GROUP BY age
  order by count(age) DESC;


  #Ô∏è‚É£ HAVING

    üëâ HAVING clause is used to define condition for GROUP BY values.

  ‚≠ê  HAVING clause mainly used with GROUP BY clause.


  Syntax :  üåø

  SELECT col1, col2, ... FROM table_name
  WHERE condition
  GROUP BE col1, col2, ... 
  HAVING condition
  ORDER BY column ASC | DESC;
  

  üëâ Those WHERE & ORDER BY clauses are OPTIONAL, but if used then order must be that sequence.


  Example :  üìù

  SELECT count(age),name AS Total,age FROM Student_info
  WHERE age > 18
  GROUP BY age
  HAVING count(age) >1
  ORDER BY name;




Chapter 25 : SubQuery with EXISTS & NOT EXISTS  ‚úåÔ∏è

  Syntax :  üåø

  SELECT col1, col2, ... FROM table1
  WHERE 
  column comparison_operators (SELECT column FROM table2 WHERE condition);


  ‚≠ê SubQuery work with clauses(INSERT, UPDATE, DELETE, SELECT)


  Example :  üìù

  SELECT * FROM student_info
  WHERE course IN (SELECT course_id FROM Course WHERE course_name in ('HTML','CSS'));

    

  #Ô∏è‚É£ SubQuery With EXISTS

  Syntax :  üåø

  SELECT col1, col2, ... 
  FROM table1
  WHERE EXISTS (SELECT column FROM table2 WHERE condition);


  Example :  üìù

  SELECT * FROM student_info
  WHERE exists (SELECT course_id FROM Course);
  
  üëâ If any single record exists then parent command show results.

  üëâ It will return 1 if EXISTS is successful, 0 otherwise.


  #Ô∏è‚É£ SubQuery With NOT EXISTS

  Syntax :  üåø

  SELECT col1, col2, ... 
  FROM table1
  WHERE NOT EXISTS (SELECT column FROM table2 WHERE condition);


  Example :  üìù

  SELECT * FROM student_info
  WHERE NOT EXISTS (SELECT course_id FROM Course);
  
  üëâ If not any single record exists then parent command show results.





Chapter 26 : UNION & UNION ALL  ‚úåÔ∏è

  üëâ UNION & UNION ALL clauses are used for combine multiple tables.


  ‚≠ê UNION  =>  Ignore duplicate records

  ‚≠ê UNION ALL =>  Display duplicate records also.


  #Ô∏è‚É£ Rules 

    1Ô∏è‚É£ Each SELECT statement within UNION / UNION ALL must have the same number of columns.

    2Ô∏è‚É£ The columns must also have similar data-type.

    3Ô∏è‚É£ The columns in each SELECT statement must also be in the same order.


  Syntax :  üåø

  SELECT col1, col2, ... FROM Table1
  UNION / UNION ALL
  SELECT col1, col2, ... FROM Table2;


  Example :  üìù

  SELECT age, name, gender FROM table1 
  UNION ALL
  SELECT age, name, gender FROM table2;





Chapter 27 : IF() & CASE Clause  ‚úåÔ∏è

  #Ô∏è‚É£ IF() Function

    üëâ The IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.

  
  Syntax :  üåø

  SELECT col1, col2,
  IF(Condition, TRUE Result, FALSE Result) AS alias_name
  FROM table_name;


  Example :  üìù

  SELECT id , name,
  IF(percentage>=60,'PASS', 'FAIL') AS Percentage
  FROM table3;



  #Ô∏è‚É£ CASE Clause 

    üëâ CASE Clause is used for define multiple-condition.


  Syntax :  üåø 

  SELECT col1, col2,
  CASE 
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN condition3 THEN result3
    ...
    ELSE result 
  END AS alias_name

  FROM table_name;


  Example :  üìù

  ‚≠ï CASE Clause With SELECT Statement

  SELECT id , name, percentage,
  CASE
      WHEN percentage >=90 AND percentage <=100 THEN 'A+'
      WHEN percentage >=80 AND percentage <90 THEN 'A'
      WHEN percentage >=70 AND percentage <80 THEN 'A-'
      WHEN percentage >=60 AND percentage <70 THEN 'B'
      WHEN percentage < 60  THEN 'FAIL'
      ELSE 'Not correct score'
  END AS Grade
  FROM table3;


  ‚≠ï CASE Clause With UPDATE Statement

  UPDATE table3
  SET percentage = (
      CASE
        WHEN id = 5 THEN 65
        WHEN id = 6 THEN 85
        WHEN id = 1 THEN 55
      END
      )
  WHERE id IN (5,6,1);




Chapter 28 : Arithmetic Functions  ‚úåÔ∏è

  üåø PI() 

    üëâ Return PI value.

    ‚úíÔ∏è PI()  =>  3.141593


  üåø ABS(number)  

    üëâ Return absolute value (POSITIVE VALUE).

    ‚úíÔ∏è ABS(-6.5)  =>  6.5


  üåø FLOOR(number)  

    üëâ Return lower Integer value.

    ‚úíÔ∏è FLOOR(6.7)  =>  6


  üåø CEIL(number)  

    üëâ Return upper integer value.

    ‚úíÔ∏è CEIL(6.7)  =>  7


  üåø ROUND(number)  

    üëâ After decimal, 0-.4 Return as like FLOOR() & .5-1 as like return CEIL().

    ‚úíÔ∏èROUND(2.4) => 2,
      ROUND(2.5) => 3, 

    üëâ If after decimal, need specific range of number with rounded.

    ‚úíÔ∏èROUND(324.4567,2)  =>  324.46

    ‚≠ê That procedure not applicable with FLOOR() & CEIL() Function.


  üåø FORMAT(number,how_many)  

    üëâ Same as like ROUND() function.

    üëâ If after decimal, need specific range of number with rounded.

    ‚úíÔ∏è FORMAT(64.4563,2) =>  64.457


  üåø SQRT(number)  

    üëâ Return square-root value.

    ‚úíÔ∏è SQRT(64) =>  8


  üåø POW(base,exp)  

    üëâ Return x to the power y value.

    ‚úíÔ∏è POW(2,3) =>  8



  üåø SIGN(number)  

    üëânum > 0  => 1
      num = 0  => 0
      num < 0  => -1

    ‚úíÔ∏èSIGN(5) => 1, 
      SIGN(0) => 0, 
      SIGN(-5) => -1


  üåø RAND()  

    üëâ Return random value between 0 to 1

    ‚úíÔ∏è RAND()  => 0.456


  Example :  üìù

  SELECT 5+6 AS Calculation;

  SELECT PI();

  SELECT ROUND(1234.987,2);  =>  1234.98

  SELECT POW(2,3) AS POWER_OF;

  SELECT ROUND(SQRT(5),2);

  SELECT ROUND(RAND() * 10);

  SELECT FLOOR(7 + (RAND() * 6));  => (7 to 12)

  ‚≠êSELECT id, name, percentage
    FROM table3
    ORDER BY RAND();

  ‚≠êSELECT id, name, (percentage % 10) AS 'New Percentage' FROM table3;




Chapter 29 : String Functions  ‚úåÔ∏è

  üåø UPPER('string')

    üëâ Return all characters within Upper-case.

    ‚úíÔ∏è UPPER('Tangil');
    
      üéà TANGIL


  üåø LOWER('string')

    üëâ Return all characters within Lower-case.

    ‚úíÔ∏è LOWER('Tangil');  
    
      üéà tangil


  üåø LENGTH('string')

    üëâ Return all characters total length.

    ‚úíÔ∏è LENGTH('Tangil'); 
    
      üéà 6


  üåø CONCAT('string')

    üëâ Can attach multiple-strings combination.

    ‚úíÔ∏è CONCAT('Tangil ', 'Rahman');  
    
      üéà Tangil Rahman


  üåø LTRIM('string')

    üëâ Trim from left-side.

    ‚úíÔ∏è LTRIM('  Tangil');
    
      üéà   Tangil


  üåø RTRIM('string')

    üëâ Trim from right-side.

    ‚úíÔ∏è LTRIM('Tangil  '); 
    
    üéà Tangil


  üåø TRIM('string')

    üëâ Trim from left-side & right-side.

    ‚úíÔ∏è TRIM('  Tangil  ');
    
      üéà Tangil


  üåø POSITION('search_word' IN 'string')

    üëâ Return 1st match starting length.

    ‚úíÔ∏è POSITION('i' IN 'Tangil');
    
      üéà 5


  üåø LOCATE('search_word','string',searching_start_length)

    üëâ Return 1st match starting length.

    ‚úíÔ∏è LOCATE('a', 'Tangilur Rahman', 3);
    
      üéà 11


  üåø SUBSTRING('string',starting_length,end_length)

    üëâ Return specific sub-string.

    ‚úíÔ∏è SUBSTRING('Tangilur Rahman',3)  =>  ngilur Rahman

    ‚úíÔ∏è SUBSTRING('Tangilur Rahman',3,8)  =>  ngilur R

    ‚úíÔ∏è SUBSTRING('Tangilur Rahman',-8,5)  =>  r Rah


  üåø SUBSTRING_INDEX('string', delimiter, which_one_index)

    üëâ Returns a sub-string from a string before a specified number of delimiter occurs.

    ‚úíÔ∏è SUBSTRING_INDEX('Tangilur Rahman','a',2); 
    
      üéà Tangilur R


  üåø LEFT('string', index_position)

    üëâ Returns a sub-string from a string before(Left) a specified number of index-position.

    ‚úíÔ∏è LEFT('Tangilur Rahman',10); 
    
      üéà Tangilur R


  üåø RIGHT('string', index_position)

    üëâ Returns a sub-string from a string after(Right) a specified number of index-position.

    ‚úíÔ∏è RIGHT('Tangilur Rahman',10);  
    
      üéà lur Rahman


  üåø RPAD('string', length, 'rpad_string')

    üëâ In Specific String, We can increase that string-length at right-side and attach any 'lpad-string'.  

    ‚úíÔ∏è RPAD('Tangil',15,'@'); 
    
      üéà Tangil@@@@@@@@@


  üåø LPAD('string', length, 'rpad_string')

    üëâ In Specific String, We can increase that string-length at left-side and attach any 'lpad-string'.  

    ‚úíÔ∏è LPAD('Tangil',15,'@'); 
    
      üéà @@@@@@@@@Tangil


  üåø SPACE(how_many_space_index_number)

    üëâ That function is used for add blank-space in the field.   

    ‚úíÔ∏è SPACE(50) => 


  üåø REVERSE('string')

    üëâ Return that string's reverse format.   

    ‚úíÔ∏è REVERSE('Tangil');
    
      üéà lignat
    
    
  üåø REPLACE('string', 'search-string', 'replace-string')

    üëâ That function is used for replace string.   

    ‚úíÔ∏è REPLACE('Tangilur Ahmed', 'Ahmed', 'Rahman');
      
      üéà Tangilur Rahman


  üåø STRCMP('string', 'another-string')

    üëâ That function is used for compare multiple-string.   

    
    ‚≠êleft-string  =  right-string  =>  0
      left-string  >  right-string  =>  1
      left-string  <  right-string  =>  -1

    ‚úíÔ∏è STRCMP('Tangil','tangil')  =>  0

    ‚úíÔ∏è STRCMP('Tangil','Sangil')  =>  -1

    ‚úíÔ∏è STRCMP('Sangil','Tangil')  =>  1

    
  
  üåø FIELD(searching-value, val1, val2, val3, ...)

    üëâ That function is used for searching specific-string from multiple string. 
    
    üëâ Return 1st match value's index-position.

    ‚úíÔ∏è FIELD('tan', 'hi', 'hello', 'tan');  =>  3

    ‚úíÔ∏è FIELD(5, 3, 5, 5, 8);  =>  3


  üåø FIND_IN_SET(searching-value, 'val1,val2,val3')

    üëâ That function is used for searching specific-string from a set. 
    
    üëâ Return 1st match value's index-position.

    üëâ Don't insert blank-space inside the set.


    ‚úíÔ∏è FIND_IN_SET('tan','hi,hello,tam,tan,bye');  
    
      üéà 4

    

  üåø HEX('string')

    üëâ Return hexadecimal format of that string.

    üëâ We can used it with password.


    ‚úíÔ∏è HEX('Tangil');  
    
      üéà 54616E67696C




Chapter 30 : Date Functions  ‚úåÔ∏è

  üåø CURRENT_DATE();

    üëâ Return current date. 

    ‚úíÔ∏è SELECT CURRENT_DATE();


  üåø NOW();

    üëâ Return current date & time. 

    ‚úíÔ∏è SELECT NOW();


  üåø DATE('date time');

    üëâ Return only date. 

    ‚úíÔ∏è DATE('2021-10-14 09:34:21');  
    
      üéà 2021-10-14


  üåø DAY('date');

    üëâ Return only day. 

    ‚úíÔ∏è DAY('2021-10-14');  
    
      üéà 14


  üåø DAYNAME('date');

    üëâ Return day-name from the given date. 

    ‚úíÔ∏è DAYNAME('2012-4-24');  
    
      üéà Tuesday


  üåø DAYOFYEAR('date');

    üëâ Return number of day from the given date.(1 to 365) 

    ‚úíÔ∏è DAYOFYEAR('2012-4-24'); 
    
      üéà 115


  üåø WEEK('date');

    üëâ Return number of week from the given date.(1 to 52) 

    ‚úíÔ∏è DAYOFYEAR('2012-4-24');  
    
      üéà 17


  üåø MONTH('date');

    üëâ Return only month. 

    ‚úíÔ∏è MONTH('2021-10-14');  
    
      üéà 10


  üåø MONTHNAME('date');

    üëâ Return month-name from the given date. 

    ‚úíÔ∏è MONTH('2021-10-14');  
    
      üéà October


  üåø YEAR('date');

    üëâ Return only year. 

    ‚úíÔ∏è YEAR('2021-10-14');  
    
      üéà 2021


  üåø LAST_DAY('date');

    üëâ Return last day of month from the given date. 

    ‚úíÔ∏è LAST_DAY('2021-10-14'); 
    
      üéà 2021-10-31


  üåø EXTRACT(what_want from 'date time');

    üëâ Return what do you want from the given date. 


    ‚úíÔ∏è SELECT EXTRACT(SECOND FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(MINUTE FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(HOUR FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(DAY FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(WEEK FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(MONTH FROM NOW());

    ‚úíÔ∏è SELECT EXTRACT(YEAR FROM NOW());



  üåø ADDDATE('date' INTERVAL add_anything)

    üëâ That function is used for adding date with the given date.


    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 20 MINUTE );

    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 8 HOUR );

    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 10 DAY );

    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 10 WEEK );

    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 2 MONTH );

    ‚úíÔ∏è SELECT ADDDATE(NOW() ,INTERVAL 5 YEAR );


  
  üåø SUBDATE('date' INTERVAL add_anything)

    üëâ That function is used for subtracting date with the given date.

    üëâ It's the reverse of ADDDATE, all procedure same.


  üåø DATEDIFF('date1', 'date2')

    üëâ Return how many days different between 2 dates.

    ‚úíÔ∏è DATEDIFF('2017-12-01',NOW());  =>  -1653


  üåø MAKEDATE(year,day_of_year)

    üëâ Returns a date based on a year and a number of days value

    ‚úíÔ∏è MAKEDATE(2022,175); 
     
      üéà 2022-06-24


  üåø Date & Time Format

    #Ô∏è‚É£ List of Date format

      ‚≠ï Day

        üëâ %d  =>  (01 to 31)

        üëâ %e  =>  (1 to 31)

        üëâ %D  =>  (st, nd, rd, th,...)

        üëâ %j  =>  (001 to 365)


      ‚≠ï Month

        üëâ %M  =>  (January)

        üëâ %b  =>  (Jan to Dec)

        üëâ %m  =>  (00 to 12)

        üëâ %c  =>  (0 to 12)


      ‚≠ï Year

        üëâ %Y  =>  (2022)

        üëâ %y  =>  (22)


      ‚≠ï Week

        üëâ %a  =>  (Mon)

        üëâ %W  =>  (Monday)

        üëâ %w  =>  (0 to 6)

     
        
    #Ô∏è‚É£ List of Time format

      ‚≠ï Hour

        üëâ %h  =>  (01 to 12)

        üëâ %H  =>  (00 to 23)

        üëâ %g  =>  (1 to 12)

        üëâ %G  =>  (0 to 23)


      ‚≠ï Minutes

        üëâ %i  =>  (00 to 59)


      ‚≠ï Seconds

        üëâ %s  =>  (00 to 59)


      ‚≠ï Microseconds

        üëâ %f  =>  (000000 to 999999)

      
      ‚≠ï Meridiem

        üëâ %p (AM or PM)



    Example :  üìù

    ‚úíÔ∏è SELECT DATE_FORMAT(NOW(), '%d/%m/%Y');  

      üëâ 11/06/2022

    ‚úíÔ∏è SELECT DATE_FORMAT(NOW(), '%d-%b-%Y');  

      üëâ 11-06-2022

    ‚úíÔ∏è SELECT DATE_FORMAT(NOW(), '%d-%m-%Y, %W');  

      üëâ 11/06/2022, Saturday



  üåø STR_TO_DATE('readable_date','format')

    üëâ Return MySQL-format from readable-format. 

    ‚úíÔ∏èSTR_TO_DATE('June 6 2022', '%M %d %Y');


   
    

Chapter 31 : Time Functions  ‚úåÔ∏è

  üåø CURRENT_TIME();

    üëâ Return current-time

    ‚úíÔ∏è SELECT CURRENT_TIME();


  üåø TIME('date time');

    üëâ Return only time.

    ‚úíÔ∏è TIME('2022-6-23 6:56:33');


  üåø HOUR('date time');

    üëâ Return only hour.

    ‚úíÔ∏è HOUR('2022-6-23 6:56:33');


  üåø MINUTE('date time');

    üëâ Return only minute.

    ‚úíÔ∏è MINUTE('2022-6-23 6:56:33');


  üåø SECOND('date time');

    üëâ Return only second.

    ‚úíÔ∏è SECOND('2022-6-23 6:56:33');


  üåø TIMEDIFF('time1', 'time2');

    üëâ Compare two times and return differentiation.

    ‚úíÔ∏è TIMEDIFF ('20:56:33','06:50:23');
    
      üéà 14:06:10 


  üåø MAKETIME(hour,minute,second)

    üëâ Return a time based on an hour, minute, and second value.

    ‚úíÔ∏è MAKETIME(2,34,45);

      üéà 02:34:45


  üåø TIMESTAMP('date', 'time')

    üëâ Combine date & time together.

    ‚úíÔ∏è TIMESTAMP ('2022-6-12','1:12:23');

      üéà 2022-06-12 01:12:23


  üåø TIME_FORMAT('time', 'format')

    üëâ For formatting only time.

    ‚úíÔ∏è TIME_FORMAT ('1:12:23','%H-%i-%s %p');

      üéà 1-12-23 AM


  üåø TIME_TO_SEC('time')

    üëâ Return total second base on time.

    ‚úíÔ∏è TIME_TO_SEC('13:12:23');

      üéà 47543


  üåø SEC_TO_TIME('second')

    üëâ Return time base on total second.

    üëâ That function reverse of TIME_TO_SEC()

    ‚úíÔ∏è SEC_TO_TIME('47543');

      üéà 13:12:23





Chapter 32 : ALTER  ‚úåÔ∏è

  üëâ ALTER Clause is used for modify table's feature. 


  #Ô∏è‚É£ Feature of ALTER clause

    üëâ Add new column in a table

    üëâ Changing data-type of a existing column

    üëâ Adding constraints on existing column

    üëâ Change existing column-name

    üëâ Reordering column position

    üëâ Delete column

    üëâ Change existing table-name
    

  
  Syntax :  üåø 

  ‚≠ï Add New Column In A Table

  ‚úíÔ∏èALTER TABLE table_name
    ADD column_name datatype constrain;


  ‚≠ï Changing Data-type Of A Existing Column

  ‚úíÔ∏èALTER TABLE table_name
    MODIFY column_name datatype constrain;


  ‚≠ï Delete A Column

  ‚úíÔ∏èALTER TABLE table_name
    DROP COLUMN column_name;


  ‚≠ï Reordering Column Position

  ‚úíÔ∏èALTER TABLE table_name
    MODIFY column_name datatype constrain
    AFTER specific column_name;


  ‚≠ï Adding Constraints On Existing Column

  ‚úíÔ∏èALTER TABLE table_name
    ADD CONSTRAINT (column_name);

 
  ‚≠ï Change Existing Column-Name

  ‚úíÔ∏èALTER TABLE table_name
    CHANGE old_column_name new_column_name datatype constrain;


  ‚≠ï Change Existing Table-Name

  ‚úíÔ∏èALTER TABLE table_name
    RENAME new_table_name;


  ‚≠ï AUTO_INCREMENT Starting_Index Modify

  ‚úíÔ∏èALTER TABLE courses
    AUTO_INCREMENT = number;

 
  Example :  üìù

  ‚≠ï Add New Column In A Table

  ALTER TABLE table3
  ADD email VARCHAR(255) UNIQUE;


  ‚≠ï Changing Data-type Of A Existing Column

  ALTER TABLE table3
  MODIFY email VARCHAR(255) UNIQUE;


  ‚≠ï Delete A Column

  ALTER TABLE table3
  DROP COLUMN email;


  ‚≠ï Reordering Column Position

  ALTER TABLE table3
  MODIFY email varchar(255) unique
  AFTER name;


  ‚≠ï Adding Constraints On Existing Column

  ALTER TABLE table3
  ADD primary key (id);

  ALTER TABLE table3
  ADD unique (email);

 
  ‚≠ï Change Existing Column-Name

  ALTER TABLE table3
  CHANGE email email_id varchar(255) unique;


  ‚≠ï Change Existing Table-Name

  ALTER TABLE table3
  RENAME table4;





Chapter 33 : DROP & TRUNCATE  ‚úåÔ∏è

  #Ô∏è‚É£ Different DROP & TRUNCATE

    ‚≠ï DROP => Delete whole table.

    ‚≠ï TRUNCATE => Only delete data, not table's structure.


  Syntax :  üåø

  ‚≠ï DROP Clause

  DROP TABLE table_name;


  ‚≠ï TRUNCATE Clause

  TRUNCATE TABLE table_name;


  Example :  üìù

  DROP TABLE student_info;

  TRUNCATE TABLE student_info;




Chapter 34 : VIEW  ‚úåÔ∏è

  üëâ In MySQL, a VIEW is a virtual table based on the result-set of an SQL statement.

  üëâ A VIEW contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.

  üëâ VIEW only store SQL statements, not data.

  üëâ VIEW also permanently saved on database, but we can delete it anytime.



  Syntax :  üåø

  ‚≠ï Create VIEW

  CREATE VIEW view_name
  AS

  SELECT columns
  FROM table1
  INNER JOIN table2
  ON table1.column = table2.column;


  ‚≠ï Displaying VIEW

  SELECT col1, col2, ... FROM VIEW_NAME;


  ‚≠ï MODIFY VIEW

  ALTER VIEW view_name
  AS

  SELECT columns
  FROM table1
  INNER JOIN table2
  ON table1.column = table2.column

  INNER JOIN table3
  ON table1.column = table3.column;


  ‚≠ï RENAME VIEW

  RENAME TABLE view_name
  TO new_view_name;


  ‚≠ï DELETE VIEW

  DROP VIEW view_name;



  Example :  üìù

  CREATE VIEW student_details
  AS
  SELECT s.id,s.name,c.city_name,C2.course_name from student_info s
  INNER JOIN City C on s.city = C.city_id
  INNER JOIN Course C2 on s.course = C2.course_id;


  
  #Ô∏è‚É£ Advantages & Disadvantages of VIEW

    ‚≠ï Advantages

      üëâ Simplify complex query.

      üëâ Provides extra layer of security.


    ‚≠ï Disadvantages

      üëâ Performance decrease.

      üëâ Dependency on table.





Chapter 35 : INDEX  ‚úåÔ∏è

  üëâ INDEX Clause is used to create indexes in tables.

  üëâ Indexes are used to retrieve data from the database more quickly than otherwise.
  The users cannot see the indexes, they are just used to speed up searches/queries.

  üëâ INDEX also permanently saved on database, but we can delete it anytime.


  #Ô∏è‚É£ Guidelines of Index : 

    üëâ Automatically creates the indexes for PRIMARY KEY and UNIQUE columns.

    üëâ Index columns that we frequently use to retrieve the data.

    üëâ Index columns that are used for joins to improve join performance.

    üëâ Avoid columns that contain too many NULL values.

    üëâ In small tables don't require indexes, minimum 1000+ records.



  Syntax :  üåø 

  ‚≠ï Create INDEX
  
  CREATE INDEX index_name
  ON table_name(col1, col2, ...);


  ‚≠ï Displaying All Index Of Specific Table

  SHOW INDEX FROM table_name;


  ‚≠ï Delete INDEX

  DROP INDEX index_name
  ON table_name;


  Example :  üìù

  CREATE INDEX index_for_name
  ON student_info(name);

  DROP INDEX index_for_name
  ON student_info;

  SHOW INDEX FROM student_info;


üòäENDüòä
*/